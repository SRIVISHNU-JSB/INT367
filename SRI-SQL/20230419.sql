/*
WAP TO DIVIDE 2 NUMBERS
*/

DECLARE
A NUMBER:=8;
B NUMBER:=0;
BEGIN
DBMS_OUTPUT.PUT_LINE(A/B);
EXCEPTION
WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('DVISION BY ZERO IS NOT ALLOWED, CHANGE DIVISOR');
DBMS_OUTPUT.PUT_LINE(SQLERRM);
DBMS_OUTPUT.PUT_LINE(SQLCODE);
WHEN TOO MANY R
END


/*
WAP TO DIVIDE 2 NUMBERS
*/

DECLARE
A NUMBER:=8;
B NUMBER:=0;
BEGIN
DBMS_OUTPUT.PUT_LINE(A/B);
EXCEPTION
WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('DVISION BY ZERO IS NOT ALLOWED, CHANGE DIVISOR');
DBMS_OUTPUT.PUT_LINE(SQLERRM);
DBMS_OUTPUT.PUT_LINE(SQLCODE);
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('SELECT SINGLE VALUE');
WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('CHANGE VALUE');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR!');

END


/*
WAP TO DIVIDE 2 NUMBERS
*/

DECLARE
A NUMBER:=8;
B NUMBER;
BEGIN
SELECT AGE INTO B FROM EMP WHERE AGE=21;
DBMS_OUTPUT.PUT_LINE(A/B);
EXCEPTION
WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('DVISION BY ZERO IS NOT ALLOWED, CHANGE DIVISOR');
DBMS_OUTPUT.PUT_LINE(SQLERRM);
DBMS_OUTPUT.PUT_LINE(SQLCODE);
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('SELECT SINGLE VALUE');
WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('CHANGE VALUE');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('SELECT SINGLE VALUE');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('REPLACE THE INPUT VALUE');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR!');

END


SELECT * FROM EMP;

/*
WAP FOR USER DEFINED EXCEPTION
*/


SELECT * FROM EMP;

DECLARE
AG NUMBER:=17;
SAL NUMBER:=90000;

WRONG_AG EXCEPTION;
--PRAGMA WRONG_AG;

BEGIN
IF (AG<18) THEN
RAISE WRONG_AG;
END IF;

INSERT INTO EMP VALUES(AG,SAL);

EXCEPTION
WHEN WRONG_AG THEN
DBMS_OUTPUT.PUT_LINE('AGE SHOULD BE ABOVE 18 FOR VOTING');

END


/*
WAP FOR NON-DEFINED EXCEPTION USING PRAGMA
*/


CREATE TABLE TB21
(
NAME CHAR,
AGE NUMBER
)

DECLARE
LARGE_VALUE EXCEPTION;
PRAGMA EXCEPTION_INIT(LARGE_VALUE,-12899);
BEGIN
INSERT INTO TB21(NAME,AGE) VALUES('JASON',22);
EXCEPTION
WHEN LARGE_VALUE THEN
DBMS_OUTPUT.PUT_LINE('LARGE VALUE FOUND, GIVE SMALL VALUE');
END

